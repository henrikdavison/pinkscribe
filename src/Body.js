// src/Body.js

import { useState } from 'react'
import { Tooltip } from 'react-tooltip'
import SelectForce from './Force/SelectForce'
import SelectionModal from './Force/SelectionModal'
import ViewRoster from './ViewRoster'
import { downloadRoster, saveRoster } from './repo/rosters'
import { refreshRoster } from './utils'
import { useConfirm, usePath, useRoster, useSystem, useFs } from './Context'
import { pathToForce } from './validate'

const Body = ({ children, systemInfo, setSystemInfo }) => {
  const [roster, setRoster] = useRoster()
  const confirmLeaveRoster = useConfirm(
    roster?.__.updated,
    `${roster?.__.filename} has not been saved. Are you sure you want to close it?`,
  )
  const system = useSystem()
  const [path, setPath] = usePath()
  const [open, setOpen] = useState(false)
  const { fs, rosterPath } = useFs()

  return (
    <div className="container">
      <Tooltip id="tooltip" />
      <header>
        <nav>
          <ul>
            {roster && (
              <li>
                <SelectForce value={pathToForce(path)} onChange={setPath}>
                  <option value="">Manage Roster</option>
                </SelectForce>
              </li>
            )}
          </ul>
          {system && (
            <ul>
              {roster && (
                <li>
                  <button className="outline" onClick={() => setOpen(!open)}>
                    View/Print
                  </button>
                </li>
              )}
              {roster && (
                <li>
                  <button className="outline" onClick={() => downloadRoster(roster)}>
                    Download
                  </button>
                </li>
              )}
              {roster && (
                <li>
                  <button
                    className="outline"
                    disabled={!roster.__.updated}
                    onClick={async () => {
                      await saveRoster(roster, fs, rosterPath)
                      setRoster(roster, false)
                    }}
                  >
                    Save
                  </button>
                </li>
              )}
              <li>
                <details role="list" dir="rtl">
                  <summary aria-haspopup="listbox" role="link">
                    â‰¡
                  </summary>
                  <ul role="listbox">
                    {roster && (
                      <li
                        data-tooltip-id="tooltip"
                        data-tooltip-html="This can be useful if the game system has been updated or if the roster was generated by a different tool and something seems incorrect."
                      >
                        <span
                          role="link"
                          onClick={() => {
                            document.querySelectorAll('details').forEach((d) => d.removeAttribute('open'))
                            setRoster(refreshRoster(roster, system))
                          }}
                        >
                          Refresh Roster
                        </span>
                      </li>
                    )}
                    {roster && (
                      <li data-tooltip-id="tooltip" data-tooltip-html="Load a different roster">
                        <span
                          role="link"
                          onClick={async () =>
                            await confirmLeaveRoster(() => {
                              document.querySelectorAll('details').forEach((d) => d.removeAttribute('open'))
                              setPath('')
                              setRoster()
                            })
                          }
                        >
                          Roster
                          <div>
                            <small>{roster.__.filename.split('/').at(-1)}</small>
                          </div>
                        </span>
                      </li>
                    )}
                    <li data-tooltip-id="tooltip" data-tooltip-html="Load a different game system">
                      <span
                        role="link"
                        onClick={async () =>
                          await confirmLeaveRoster(() => {
                            document.querySelectorAll('details').forEach((d) => d.removeAttribute('open'))
                            setPath('')
                            setRoster()
                            setSystemInfo({ name: systemInfo.name })
                          })
                        }
                      >
                        Game System
                        <div>
                          <small>{system?.gameSystem.name}</small>
                        </div>
                      </span>
                    </li>
                  </ul>
                </details>
              </li>
            </ul>
          )}
        </nav>
      </header>
      {children}
      <SelectionModal open={open} setOpen={setOpen}>
        {roster && <ViewRoster />}
      </SelectionModal>
    </div>
  )
}

export default Body
