name: 'publish'

on:
  release:
    types: [released]

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-22.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: install frontend dependencies
        run: npm ci
      # - name: Build Web Deployment
      #   if: matrix.platform == 'ubuntu-22.04'
      #   run: npm run build
      # - name: Deploy Github Pages (ubuntu only)
      #   if: matrix.platform == 'ubuntu-22.04'
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: ./build/
      - name: get version (ubuntu/mac)
        if: matrix.platform != 'windows-latest'
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: get version (windows only)
        if: matrix.platform == 'windows-latest'
        run: echo "PACKAGE_VERSION=$(node -p "require('.\\package.json').version")" >> $env:GITHUB_ENV
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf javascriptcoregtk-4.1 libsoup-3.0-dev
      - name: update tauri-cli
        run: |
          cargo install tauri-cli --debug --git https://github.com/tauri-apps/tauri
      - name: build tauri
        id: tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ github.event.release.id }}
          tauriScript: cargo tauri
          args: '--config ''{"package": {"version": "${{env.PACKAGE_VERSION}}"}}'''
      - name: portable build (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          PORTABLE_PACKAGE=bluescribe-v${{env.PACKAGE_VERSION}}-portable-linux-x64
          echo "PORTABLE_PACKAGE=$PORTABLE_PACKAGE" >> $GITHUB_ENV
          mkdir -p dist/$PORTABLE_PACKAGE
          cp README.md LICENSE dist/$PORTABLE_PACKAGE
          cp src-tauri/target/release/bluescribe dist/$PORTABLE_PACKAGE
          cd dist
          tar -czvf $PORTABLE_PACKAGE.tar.gz $PORTABLE_PACKAGE
          cd ..
      - name: upload portable build (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/${{env.PORTABLE_PACKAGE}}.tar.gz
          asset_name: ${{env.PORTABLE_PACKAGE}}.tar.gz
          asset_content_type: application/gzip
      - name: portable build (windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          $PORTABLE_PACKAGE="bluescribe-v${{env.PACKAGE_VERSION}}-portable-win-x64"
          echo "PORTABLE_PACKAGE=$PORTABLE_PACKAGE" >> $env:GITHUB_ENV
          mkdir -p dist/$PORTABLE_PACKAGE
          cp README.md dist/$PORTABLE_PACKAGE
          cp LICENSE dist/$PORTABLE_PACKAGE
          cp src-tauri/target/release/bluescribe.exe dist/$PORTABLE_PACKAGE
      - name: portable zip (windows only)
        if: matrix.platform == 'windows-latest'
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: zip
          filename: ${{env.PORTABLE_PACKAGE}}.zip
          directory: dist
          path: ${{env.PORTABLE_PACKAGE}}
      - name: upload portable build (windows only)
        if: matrix.platform == 'windows-latest'
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/${{env.PORTABLE_PACKAGE}}.zip
          asset_name: ${{env.PORTABLE_PACKAGE}}.zip
          asset_content_type: application/zip
